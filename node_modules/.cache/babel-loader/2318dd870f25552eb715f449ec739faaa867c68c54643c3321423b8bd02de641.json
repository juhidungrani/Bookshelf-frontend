{"ast":null,"code":"// const api = \"https://reactnd-books-api.udacity.com\"\n\n// // Generate a unique token for storing your bookshelf data on the backend server.\n// let token = localStorage.token\n// if (!token)\n//   token = localStorage.token = Math.random().toString(36).substr(-8)\n\n// const headers = {\n//   'Accept': 'application/json',\n//   'Authorization': token\n// }\n\n// export const get = (bookId) =>\n//   fetch(`${api}/books/${bookId}`, { headers })\n//     .then(res => res.json())\n//     .then(data => data.book)\n\n// export const getAll = () =>\n//   fetch(`${api}/books`, { headers })\n//     .then(res => res.json())\n//     .then(data => data.books)\n\n// export const update = (book, shelf) =>\n//   fetch(`${api}/books/${book.id}`, {\n//     method: 'PUT',\n//     headers: {\n//       ...headers,\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify({ shelf })\n//   }).then(res => res.json())\n\n// export const search = (query) =>\n//   fetch(`${api}/search`, {\n//     method: 'POST',\n//     headers: {\n//       ...headers,\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify({ query })\n//   }).then(res => res.json())\n//     .then(data => data.books)\n\nconst Headers = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json'\n};\nexport const get = bookId => fetch(`https://www.googleapis.com/books/v1/volumes/${bookId}`).then(res => res.json()).then(data => data.volumeInfo);\nexport const getAll = () => fetch(`https://www.googleapis.com/books/v1/volumes`).then(res => res.json()).then(data => data.items.map(item => item.volumeInfo));\nexport const update = (book, shelf) => Promise.resolve(book);\nexport const search = query => fetch(`https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(query)}`).then(res => res.json()).then(data => data.items.map(item => item.volumeInfo));","map":{"version":3,"names":["Headers","get","bookId","fetch","then","res","json","data","volumeInfo","getAll","items","map","item","update","book","shelf","Promise","resolve","search","query","encodeURIComponent"],"sources":["C:/Users/91900/OneDrive/Desktop/CAPSTONE PROJECT UPGRAD/frontend/src/BooksAPI.js"],"sourcesContent":["\r\n// const api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// // Generate a unique token for storing your bookshelf data on the backend server.\r\n// let token = localStorage.token\r\n// if (!token)\r\n//   token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\n// const headers = {\r\n//   'Accept': 'application/json',\r\n//   'Authorization': token\r\n// }\r\n\r\n// export const get = (bookId) =>\r\n//   fetch(`${api}/books/${bookId}`, { headers })\r\n//     .then(res => res.json())\r\n//     .then(data => data.book)\r\n\r\n// export const getAll = () =>\r\n//   fetch(`${api}/books`, { headers })\r\n//     .then(res => res.json())\r\n//     .then(data => data.books)\r\n\r\n// export const update = (book, shelf) =>\r\n//   fetch(`${api}/books/${book.id}`, {\r\n//     method: 'PUT',\r\n//     headers: {\r\n//       ...headers,\r\n//       'Content-Type': 'application/json'\r\n//     },\r\n//     body: JSON.stringify({ shelf })\r\n//   }).then(res => res.json())\r\n\r\n// export const search = (query) =>\r\n//   fetch(`${api}/search`, {\r\n//     method: 'POST',\r\n//     headers: {\r\n//       ...headers,\r\n//       'Content-Type': 'application/json'\r\n//     },\r\n//     body: JSON.stringify({ query })\r\n//   }).then(res => res.json())\r\n//     .then(data => data.books)\r\n\r\n\r\n\r\nconst Headers = {\r\n    'Accept': 'application/json',\r\n    'Content-Type': 'application/json'\r\n  };\r\n  \r\n  export const get = (bookId) =>\r\n    fetch(`https://www.googleapis.com/books/v1/volumes/${bookId}`)\r\n      .then(res => res.json())\r\n      .then(data => data.volumeInfo);\r\n  \r\n  export const getAll = () =>\r\n    fetch(`https://www.googleapis.com/books/v1/volumes`)\r\n      .then(res => res.json())\r\n      .then(data => data.items.map(item => item.volumeInfo));\r\n  \r\n  export const update = (book, shelf) =>\r\n    Promise.resolve(book);\r\n  \r\n  export const search = (query) =>\r\n    fetch(`https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(query)}`)\r\n      .then(res => res.json())\r\n      .then(data => data.items.map(item => item.volumeInfo));\r\n  "],"mappings":"AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,MAAMA,OAAO,GAAG;EACZ,QAAQ,EAAE,kBAAkB;EAC5B,cAAc,EAAE;AAClB,CAAC;AAED,OAAO,MAAMC,GAAG,GAAIC,MAAM,IACxBC,KAAK,CAAE,+CAA8CD,MAAO,EAAC,CAAC,CAC3DE,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAIA,IAAI,CAACC,UAAU,CAAC;AAElC,OAAO,MAAMC,MAAM,GAAGA,CAAA,KACpBN,KAAK,CAAE,6CAA4C,CAAC,CACjDC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAIA,IAAI,CAACG,KAAK,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACJ,UAAU,CAAC,CAAC;AAE1D,OAAO,MAAMK,MAAM,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAChCC,OAAO,CAACC,OAAO,CAACH,IAAI,CAAC;AAEvB,OAAO,MAAMI,MAAM,GAAIC,KAAK,IAC1BhB,KAAK,CAAE,iDAAgDiB,kBAAkB,CAACD,KAAK,CAAE,EAAC,CAAC,CAChFf,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAIA,IAAI,CAACG,KAAK,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACJ,UAAU,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}