{"ast":null,"code":"\n// import React from \"react\";\n// import { BrowserRouter, Route, Switch } from \"react-router-dom\";\n// import Search from \"./Search\";\n// import Home from \"./Home\";\n// import About from \"./About\";\n// import Header from \"./Header\";\n// import Footer from \"./Footer\";\n// import Login from \"./Login\";\n// import Signup from \"./Signup\";\n// import \"bootstrap/dist/css/bootstrap.css\";\n// import \"./App.css\";\n// import \"@fortawesome/fontawesome-svg-core/styles.css\";\n\n// class BooksApp extends React.Component {\n//   state = {\n//     homeLoader: false,\n//     searchLoader: false,\n//     selectMenuDisabled: false,\n//     books: [],\n//     shelfs: {\n//       currentlyReading: {\n//         name: \"currentlyReading\",\n//         uiName: \"Currently Reading\",\n//         data: [],\n//       },\n//       wantToRead: {\n//         name: \"wantToRead\",\n//         uiName: \"Want to Read\",\n//         data: [],\n//       },\n//       read: {\n//         name: \"read\",\n//         uiName: \"Read\",\n//         data: [],\n//       },\n//     },\n//   };\n\n//   selectingOption = () => {\n//     this.setState({\n//       selectMenuDisabled: true,\n//     });\n//   };\n\n//   initializeHomeLoader = () => {\n//     this.setState({ homeLoader: true });\n//   };\n\n//   initializeSearchLoader = () => {\n//     this.setState({ searchLoader: true });\n//   };\n\n//   setBooks = (books) => {\n//     let currentlyReadingShelfBooks = this.state.shelfs.currentlyReading.data,\n//       wantToReadShelfBooks = this.state.shelfs.wantToRead.data,\n//       readShelfBooks = this.state.shelfs.read.data;\n//     books.map((book) => {\n//       if (\n//         currentlyReadingShelfBooks.some((shelfBook) => shelfBook.id === book.id)\n//       ) {\n//         book[\"shelf\"] = \"currentlyReady\";\n//       } else if (\n//         wantToReadShelfBooks.some((shelfBook) => shelfBook.id === book.id)\n//       ) {\n//         book[\"shelf\"] = \"wantToRead\";\n//       } else if (readShelfBooks.some((shelfBook) => shelfBook.id === book.id)) {\n//         book[\"shelf\"] = \"read\";\n//       } else {\n//         book[\"shelf\"] = \"none\";\n//       }\n//     });\n\n//     this.setState({\n//       books,\n//       searchLoader: false,\n//     });\n//   };\n\n//   resetBooks = () => {\n//     this.setState({\n//       books: [],\n//       searchLoader: false,\n//     });\n//   };\n\n//   handleShelfs = (fetchedBooks, screenName) => {\n//     let clonedShelfs = this.state.shelfs;\n//     if (screenName === \"home\") {\n//       this.setState({\n//         books: fetchedBooks,\n//       });\n//     } else {\n//       this.setState({\n//         books: [],\n//       });\n//     }\n\n//     fetchedBooks.map((book) => {\n//       const bookShelf = book.shelf;\n//       if (this.state.shelfs[bookShelf].name === bookShelf) {\n//         let clonedShelf = clonedShelfs[bookShelf];\n//         clonedShelf.data.push(book);\n//         clonedShelfs = {\n//           ...clonedShelfs,\n//           [bookShelf]: clonedShelf,\n//         };\n//         this.setState({\n//           ...this.state,\n//           shelfs: clonedShelfs,\n//         });\n//       }\n//     });\n\n//     this.setState({\n//       homeLoader: false,\n//       searchLoader: false,\n//     });\n//   };\n\n//   shelfOptionSelected = (book, shelf) => {\n//     let clonedShelfs = this.state.shelfs;\n//     if (book.shelf && book.shelf !== \"none\") {\n//       let oldShelf = book.shelf,\n//         clonedOldShelf = clonedShelfs[oldShelf],\n//         filteredClonedOldShelfArray = clonedOldShelf.data.filter(\n//           (shelfBook) => book.id !== shelfBook.id\n//         );\n\n//       clonedOldShelf = {\n//         ...clonedOldShelf,\n//         data: filteredClonedOldShelfArray,\n//       };\n\n//       book.shelf = shelf;\n\n//       if (shelf !== \"none\") {\n//         let clonedNewShelf = clonedShelfs[shelf];\n//         clonedNewShelf.data.push(book);\n\n//         clonedShelfs = {\n//           ...clonedShelfs,\n//           [oldShelf]: clonedOldShelf,\n//           [shelf]: clonedNewShelf,\n//         };\n//       } else {\n//         clonedShelfs = {\n//           ...clonedShelfs,\n//           [oldShelf]: clonedOldShelf,\n//         };\n//       }\n//     }\n\n//     let clonedBooks = this.state.books;\n//     let requiredBook = clonedBooks.find(\n//       (clonedBook) => book.id === clonedBook.id\n//     );\n//     if (requiredBook) {\n//       requiredBook.shelf = shelf;\n//     }\n\n//     this.setState({\n//       ...this.state,\n//       shelfs: clonedShelfs,\n//       selectMenuDisabled: false,\n//       books: clonedBooks,\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <BrowserRouter>\n//         <div className=\"app\">\n//           <Header />\n//           <Footer />\n//           <Switch>\n//             <Route exact path=\"/about\">\n//               <About />\n//             </Route>\n//             <Route exact path=\"/Login\">\n//               <Login />\n//             </Route>\n//             <Route exact path=\"/signup\">\n//               <Signup />\n//             </Route>\n//             <Route exact path=\"/\">\n//               <Home\n//                 shelfs={this.state.shelfs}\n//                 handleShelfs={this.handleShelfs}\n//                 initializeHomeLoader={this.initializeHomeLoader}\n//                 homeLoader={this.state.homeLoader}\n//                 shelfOptionSelected={this.shelfOptionSelected}\n//                 selectingOption={this.selectingOption}\n//                 selectMenuDisabled={this.state.selectMenuDisabled}\n//               />\n//             </Route>\n\n//             <Route exact path=\"/search\">\n//               <Search\n//                 books={this.state.books}\n//                 shelfOptionSelected={this.shelfOptionSelected}\n//                 selectingOption={this.selectingOption}\n//                 handleShelfs={this.handleShelfs}\n//                 selectMenuDisabled={this.state.selectMenuDisabled}\n//                 resetBooks={this.resetBooks}\n//                 setBooks={this.setBooks}\n//                 initializeSearchLoader={this.initializeSearchLoader}\n//                 searchLoader={this.state.searchLoader}\n//               />\n//             </Route>\n//           </Switch>\n//         </div>\n//       </BrowserRouter>\n//     );\n//   }\n// }\n\n// export default BooksApp;","map":{"version":3,"names":[],"sources":["C:/Users/91900/OneDrive/Desktop/capstone project backup copy/frontend/src/components/App.js"],"sourcesContent":["\n// import React from \"react\";\n// import { BrowserRouter, Route, Switch } from \"react-router-dom\";\n// import Search from \"./Search\";\n// import Home from \"./Home\";\n// import About from \"./About\";\n// import Header from \"./Header\";\n// import Footer from \"./Footer\";\n// import Login from \"./Login\";\n// import Signup from \"./Signup\";\n// import \"bootstrap/dist/css/bootstrap.css\";\n// import \"./App.css\";\n// import \"@fortawesome/fontawesome-svg-core/styles.css\";\n\n// class BooksApp extends React.Component {\n//   state = {\n//     homeLoader: false,\n//     searchLoader: false,\n//     selectMenuDisabled: false,\n//     books: [],\n//     shelfs: {\n//       currentlyReading: {\n//         name: \"currentlyReading\",\n//         uiName: \"Currently Reading\",\n//         data: [],\n//       },\n//       wantToRead: {\n//         name: \"wantToRead\",\n//         uiName: \"Want to Read\",\n//         data: [],\n//       },\n//       read: {\n//         name: \"read\",\n//         uiName: \"Read\",\n//         data: [],\n//       },\n//     },\n//   };\n\n//   selectingOption = () => {\n//     this.setState({\n//       selectMenuDisabled: true,\n//     });\n//   };\n\n//   initializeHomeLoader = () => {\n//     this.setState({ homeLoader: true });\n//   };\n\n//   initializeSearchLoader = () => {\n//     this.setState({ searchLoader: true });\n//   };\n\n//   setBooks = (books) => {\n//     let currentlyReadingShelfBooks = this.state.shelfs.currentlyReading.data,\n//       wantToReadShelfBooks = this.state.shelfs.wantToRead.data,\n//       readShelfBooks = this.state.shelfs.read.data;\n//     books.map((book) => {\n//       if (\n//         currentlyReadingShelfBooks.some((shelfBook) => shelfBook.id === book.id)\n//       ) {\n//         book[\"shelf\"] = \"currentlyReady\";\n//       } else if (\n//         wantToReadShelfBooks.some((shelfBook) => shelfBook.id === book.id)\n//       ) {\n//         book[\"shelf\"] = \"wantToRead\";\n//       } else if (readShelfBooks.some((shelfBook) => shelfBook.id === book.id)) {\n//         book[\"shelf\"] = \"read\";\n//       } else {\n//         book[\"shelf\"] = \"none\";\n//       }\n//     });\n\n//     this.setState({\n//       books,\n//       searchLoader: false,\n//     });\n//   };\n\n//   resetBooks = () => {\n//     this.setState({\n//       books: [],\n//       searchLoader: false,\n//     });\n//   };\n\n//   handleShelfs = (fetchedBooks, screenName) => {\n//     let clonedShelfs = this.state.shelfs;\n//     if (screenName === \"home\") {\n//       this.setState({\n//         books: fetchedBooks,\n//       });\n//     } else {\n//       this.setState({\n//         books: [],\n//       });\n//     }\n\n//     fetchedBooks.map((book) => {\n//       const bookShelf = book.shelf;\n//       if (this.state.shelfs[bookShelf].name === bookShelf) {\n//         let clonedShelf = clonedShelfs[bookShelf];\n//         clonedShelf.data.push(book);\n//         clonedShelfs = {\n//           ...clonedShelfs,\n//           [bookShelf]: clonedShelf,\n//         };\n//         this.setState({\n//           ...this.state,\n//           shelfs: clonedShelfs,\n//         });\n//       }\n//     });\n\n//     this.setState({\n//       homeLoader: false,\n//       searchLoader: false,\n//     });\n//   };\n\n//   shelfOptionSelected = (book, shelf) => {\n//     let clonedShelfs = this.state.shelfs;\n//     if (book.shelf && book.shelf !== \"none\") {\n//       let oldShelf = book.shelf,\n//         clonedOldShelf = clonedShelfs[oldShelf],\n//         filteredClonedOldShelfArray = clonedOldShelf.data.filter(\n//           (shelfBook) => book.id !== shelfBook.id\n//         );\n\n//       clonedOldShelf = {\n//         ...clonedOldShelf,\n//         data: filteredClonedOldShelfArray,\n//       };\n\n//       book.shelf = shelf;\n\n//       if (shelf !== \"none\") {\n//         let clonedNewShelf = clonedShelfs[shelf];\n//         clonedNewShelf.data.push(book);\n\n//         clonedShelfs = {\n//           ...clonedShelfs,\n//           [oldShelf]: clonedOldShelf,\n//           [shelf]: clonedNewShelf,\n//         };\n//       } else {\n//         clonedShelfs = {\n//           ...clonedShelfs,\n//           [oldShelf]: clonedOldShelf,\n//         };\n//       }\n//     }\n\n//     let clonedBooks = this.state.books;\n//     let requiredBook = clonedBooks.find(\n//       (clonedBook) => book.id === clonedBook.id\n//     );\n//     if (requiredBook) {\n//       requiredBook.shelf = shelf;\n//     }\n\n//     this.setState({\n//       ...this.state,\n//       shelfs: clonedShelfs,\n//       selectMenuDisabled: false,\n//       books: clonedBooks,\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <BrowserRouter>\n//         <div className=\"app\">\n//           <Header />\n//           <Footer />\n//           <Switch>\n//             <Route exact path=\"/about\">\n//               <About />\n//             </Route>\n//             <Route exact path=\"/Login\">\n//               <Login />\n//             </Route>\n//             <Route exact path=\"/signup\">\n//               <Signup />\n//             </Route>\n//             <Route exact path=\"/\">\n//               <Home\n//                 shelfs={this.state.shelfs}\n//                 handleShelfs={this.handleShelfs}\n//                 initializeHomeLoader={this.initializeHomeLoader}\n//                 homeLoader={this.state.homeLoader}\n//                 shelfOptionSelected={this.shelfOptionSelected}\n//                 selectingOption={this.selectingOption}\n//                 selectMenuDisabled={this.state.selectMenuDisabled}\n//               />\n//             </Route>\n\n//             <Route exact path=\"/search\">\n//               <Search\n//                 books={this.state.books}\n//                 shelfOptionSelected={this.shelfOptionSelected}\n//                 selectingOption={this.selectingOption}\n//                 handleShelfs={this.handleShelfs}\n//                 selectMenuDisabled={this.state.selectMenuDisabled}\n//                 resetBooks={this.resetBooks}\n//                 setBooks={this.setBooks}\n//                 initializeSearchLoader={this.initializeSearchLoader}\n//                 searchLoader={this.state.searchLoader}\n//               />\n//             </Route>\n//           </Switch>\n//         </div>\n//       </BrowserRouter>\n//     );\n//   }\n// }\n\n// export default BooksApp;\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}