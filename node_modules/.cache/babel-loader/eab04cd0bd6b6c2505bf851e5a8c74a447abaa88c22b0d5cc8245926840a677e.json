{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91900\\\\OneDrive\\\\Desktop\\\\capstone project backup copy\\\\frontend\\\\src\\\\components\\\\App.js\";\nimport React from \"react\";\nimport { Router, Switch } from \"react-router-dom\";\nimport Routes from \"./Routes\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\nimport \"@fortawesome/fontawesome-svg-core/styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass BooksApp extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      homeLoader: false,\n      searchLoader: false,\n      selectMenuDisabled: false,\n      books: [],\n      shelfs: {\n        currentlyReading: {\n          name: \"currentlyReading\",\n          uiName: \"Currently Reading\",\n          data: []\n        },\n        wantToRead: {\n          name: \"wantToRead\",\n          uiName: \"Want to Read\",\n          data: []\n        },\n        read: {\n          name: \"read\",\n          uiName: \"Read\",\n          data: []\n        }\n      }\n    };\n    this.selectingOption = () => {\n      this.setState({\n        selectMenuDisabled: true\n      });\n    };\n    this.initializeHomeLoader = () => {\n      this.setState({\n        homeLoader: true\n      });\n    };\n    this.initializeSearchLoader = () => {\n      this.setState({\n        searchLoader: true\n      });\n    };\n    this.setBooks = books => {\n      let currentlyReadingShelfBooks = this.state.shelfs.currentlyReading.data,\n        wantToReadShelfBooks = this.state.shelfs.wantToRead.data,\n        readShelfBooks = this.state.shelfs.read.data;\n      books.map(book => {\n        if (currentlyReadingShelfBooks.some(shelfBook => shelfBook.id === book.id)) {\n          book[\"shelf\"] = \"currentlyReady\";\n        } else if (wantToReadShelfBooks.some(shelfBook => shelfBook.id === book.id)) {\n          book[\"shelf\"] = \"wantToRead\";\n        } else if (readShelfBooks.some(shelfBook => shelfBook.id === book.id)) {\n          book[\"shelf\"] = \"read\";\n        } else {\n          book[\"shelf\"] = \"none\";\n        }\n      });\n      this.setState({\n        books,\n        searchLoader: false\n      });\n    };\n    this.resetBooks = () => {\n      this.setState({\n        books: [],\n        searchLoader: false\n      });\n    };\n    this.handleShelfs = (fetchedBooks, screenName) => {\n      let clonedShelfs = this.state.shelfs;\n      if (screenName === \"home\") {\n        this.setState({\n          books: fetchedBooks\n        });\n      } else {\n        this.setState({\n          books: []\n        });\n      }\n      fetchedBooks.map(book => {\n        const bookShelf = book.shelf;\n        if (this.state.shelfs[bookShelf].name === bookShelf) {\n          let clonedShelf = clonedShelfs[bookShelf];\n          clonedShelf.data.push(book);\n          clonedShelfs = {\n            ...clonedShelfs,\n            [bookShelf]: clonedShelf\n          };\n          this.setState({\n            ...this.state,\n            shelfs: clonedShelfs\n          });\n        }\n      });\n      this.setState({\n        homeLoader: false,\n        searchLoader: false\n      });\n    };\n    this.shelfOptionSelected = (book, shelf) => {\n      let clonedShelfs = this.state.shelfs;\n      if (book.shelf && book.shelf !== \"none\") {\n        let oldShelf = book.shelf,\n          clonedOldShelf = clonedShelfs[oldShelf],\n          filteredClonedOldShelfArray = clonedOldShelf.data.filter(shelfBook => book.id !== shelfBook.id);\n        clonedOldShelf = {\n          ...clonedOldShelf,\n          data: filteredClonedOldShelfArray\n        };\n        book.shelf = shelf;\n        if (shelf !== \"none\") {\n          let clonedNewShelf = clonedShelfs[shelf];\n          clonedNewShelf.data.push(book);\n          clonedShelfs = {\n            ...clonedShelfs,\n            [oldShelf]: clonedOldShelf,\n            [shelf]: clonedNewShelf\n          };\n        } else {\n          clonedShelfs = {\n            ...clonedShelfs,\n            [oldShelf]: clonedOldShelf\n          };\n        }\n      }\n      let clonedBooks = this.state.books;\n      let requiredBook = clonedBooks.find(clonedBook => book.id === clonedBook.id);\n      if (requiredBook) {\n        requiredBook.shelf = shelf;\n      }\n      this.setState({\n        ...this.state,\n        shelfs: clonedShelfs,\n        selectMenuDisabled: false,\n        books: clonedBooks\n      });\n    };\n  }\n  render() {\n    // Function to reload the current web page\n    // function refreshPage() {\n    //   window.location.reload(false);\n    // }\n\n    return /*#__PURE__*/_jsxDEV(Switch, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Routes, {\n          shelfs: this.state.shelfs,\n          handleShelfs: this.handleShelfs,\n          initializeHomeLoader: this.initializeHomeLoader,\n          homeLoader: this.state.homeLoader,\n          shelfOptionSelected: this.shelfOptionSelected,\n          selectingOption: this.selectingOption,\n          selectMenuDisabled: this.state.selectMenuDisabled,\n          books: this.state.books,\n          resetBooks: this.resetBooks,\n          setBooks: this.setBooks,\n          initializeSearchLoader: this.initializeSearchLoader,\n          searchLoader: this.state.searchLoader\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default BooksApp;\n\n// import React from \"react\";\n// import { BrowserRouter, Route, Switch } from \"react-router-dom\";\n// import Search from \"./Search\";\n// import Home from \"./Home\";\n// import About from \"./About\";\n// import Header from \"./Header\";\n// import Footer from \"./Footer\";\n// import Login from \"./Login\";\n// import Signup from \"./Signup\";\n// import \"bootstrap/dist/css/bootstrap.css\";\n// import \"./App.css\";\n// import \"@fortawesome/fontawesome-svg-core/styles.css\";\n\n// class BooksApp extends React.Component {\n//   state = {\n//     homeLoader: false,\n//     searchLoader: false,\n//     selectMenuDisabled: false,\n//     books: [],\n//     shelfs: {\n//       currentlyReading: {\n//         name: \"currentlyReading\",\n//         uiName: \"Currently Reading\",\n//         data: [],\n//       },\n//       wantToRead: {\n//         name: \"wantToRead\",\n//         uiName: \"Want to Read\",\n//         data: [],\n//       },\n//       read: {\n//         name: \"read\",\n//         uiName: \"Read\",\n//         data: [],\n//       },\n//     },\n//   };\n\n//   selectingOption = () => {\n//     this.setState({\n//       selectMenuDisabled: true,\n//     });\n//   };\n\n//   initializeHomeLoader = () => {\n//     this.setState({ homeLoader: true });\n//   };\n\n//   initializeSearchLoader = () => {\n//     this.setState({ searchLoader: true });\n//   };\n\n//   setBooks = (books) => {\n//     let currentlyReadingShelfBooks = this.state.shelfs.currentlyReading.data,\n//       wantToReadShelfBooks = this.state.shelfs.wantToRead.data,\n//       readShelfBooks = this.state.shelfs.read.data;\n//     books.map((book) => {\n//       if (\n//         currentlyReadingShelfBooks.some((shelfBook) => shelfBook.id === book.id)\n//       ) {\n//         book[\"shelf\"] = \"currentlyReady\";\n//       } else if (\n//         wantToReadShelfBooks.some((shelfBook) => shelfBook.id === book.id)\n//       ) {\n//         book[\"shelf\"] = \"wantToRead\";\n//       } else if (readShelfBooks.some((shelfBook) => shelfBook.id === book.id)) {\n//         book[\"shelf\"] = \"read\";\n//       } else {\n//         book[\"shelf\"] = \"none\";\n//       }\n//     });\n\n//     this.setState({\n//       books,\n//       searchLoader: false,\n//     });\n//   };\n\n//   resetBooks = () => {\n//     this.setState({\n//       books: [],\n//       searchLoader: false,\n//     });\n//   };\n\n//   handleShelfs = (fetchedBooks, screenName) => {\n//     let clonedShelfs = this.state.shelfs;\n//     if (screenName === \"home\") {\n//       this.setState({\n//         books: fetchedBooks,\n//       });\n//     } else {\n//       this.setState({\n//         books: [],\n//       });\n//     }\n\n//     fetchedBooks.map((book) => {\n//       const bookShelf = book.shelf;\n//       if (this.state.shelfs[bookShelf].name === bookShelf) {\n//         let clonedShelf = clonedShelfs[bookShelf];\n//         clonedShelf.data.push(book);\n//         clonedShelfs = {\n//           ...clonedShelfs,\n//           [bookShelf]: clonedShelf,\n//         };\n//         this.setState({\n//           ...this.state,\n//           shelfs: clonedShelfs,\n//         });\n//       }\n//     });\n\n//     this.setState({\n//       homeLoader: false,\n//       searchLoader: false,\n//     });\n//   };\n\n//   shelfOptionSelected = (book, shelf) => {\n//     let clonedShelfs = this.state.shelfs;\n//     if (book.shelf && book.shelf !== \"none\") {\n//       let oldShelf = book.shelf,\n//         clonedOldShelf = clonedShelfs[oldShelf],\n//         filteredClonedOldShelfArray = clonedOldShelf.data.filter(\n//           (shelfBook) => book.id !== shelfBook.id\n//         );\n\n//       clonedOldShelf = {\n//         ...clonedOldShelf,\n//         data: filteredClonedOldShelfArray,\n//       };\n\n//       book.shelf = shelf;\n\n//       if (shelf !== \"none\") {\n//         let clonedNewShelf = clonedShelfs[shelf];\n//         clonedNewShelf.data.push(book);\n\n//         clonedShelfs = {\n//           ...clonedShelfs,\n//           [oldShelf]: clonedOldShelf,\n//           [shelf]: clonedNewShelf,\n//         };\n//       } else {\n//         clonedShelfs = {\n//           ...clonedShelfs,\n//           [oldShelf]: clonedOldShelf,\n//         };\n//       }\n//     }\n\n//     let clonedBooks = this.state.books;\n//     let requiredBook = clonedBooks.find(\n//       (clonedBook) => book.id === clonedBook.id\n//     );\n//     if (requiredBook) {\n//       requiredBook.shelf = shelf;\n//     }\n\n//     this.setState({\n//       ...this.state,\n//       shelfs: clonedShelfs,\n//       selectMenuDisabled: false,\n//       books: clonedBooks,\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <BrowserRouter>\n//         <div className=\"app\">\n//           <Header />\n//           <Footer />\n//           <Switch>\n//             <Route exact path=\"/about\">\n//               <About />\n//             </Route>\n//             <Route exact path=\"/Login\">\n//               <Login />\n//             </Route>\n//             <Route exact path=\"/signup\">\n//               <Signup />\n//             </Route>\n//             <Route exact path=\"/\">\n//               <Home\n//                 shelfs={this.state.shelfs}\n//                 handleShelfs={this.handleShelfs}\n//                 initializeHomeLoader={this.initializeHomeLoader}\n//                 homeLoader={this.state.homeLoader}\n//                 shelfOptionSelected={this.shelfOptionSelected}\n//                 selectingOption={this.selectingOption}\n//                 selectMenuDisabled={this.state.selectMenuDisabled}\n//               />\n//             </Route>\n\n//             <Route exact path=\"/search\">\n//               <Search\n//                 books={this.state.books}\n//                 shelfOptionSelected={this.shelfOptionSelected}\n//                 selectingOption={this.selectingOption}\n//                 handleShelfs={this.handleShelfs}\n//                 selectMenuDisabled={this.state.selectMenuDisabled}\n//                 resetBooks={this.resetBooks}\n//                 setBooks={this.setBooks}\n//                 initializeSearchLoader={this.initializeSearchLoader}\n//                 searchLoader={this.state.searchLoader}\n//               />\n//             </Route>\n//           </Switch>\n//         </div>\n//       </BrowserRouter>\n//     );\n//   }\n// }\n\n// export default BooksApp;","map":{"version":3,"names":["React","Router","Switch","Routes","Header","Footer","jsxDEV","_jsxDEV","BooksApp","Component","constructor","args","state","homeLoader","searchLoader","selectMenuDisabled","books","shelfs","currentlyReading","name","uiName","data","wantToRead","read","selectingOption","setState","initializeHomeLoader","initializeSearchLoader","setBooks","currentlyReadingShelfBooks","wantToReadShelfBooks","readShelfBooks","map","book","some","shelfBook","id","resetBooks","handleShelfs","fetchedBooks","screenName","clonedShelfs","bookShelf","shelf","clonedShelf","push","shelfOptionSelected","oldShelf","clonedOldShelf","filteredClonedOldShelfArray","filter","clonedNewShelf","clonedBooks","requiredBook","find","clonedBook","render","children","className","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/91900/OneDrive/Desktop/capstone project backup copy/frontend/src/components/App.js"],"sourcesContent":["import React from \"react\";\nimport { Router, Switch } from \"react-router-dom\";\nimport Routes from \"./Routes\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\nimport \"@fortawesome/fontawesome-svg-core/styles.css\";\n\nclass BooksApp extends React.Component {\n  state = {\n    homeLoader: false,\n    searchLoader: false,\n    selectMenuDisabled: false,\n    books: [],\n    shelfs: {\n      currentlyReading: {\n        name: \"currentlyReading\",\n        uiName: \"Currently Reading\",\n        data: [],\n      },\n      wantToRead: {\n        name: \"wantToRead\",\n        uiName: \"Want to Read\",\n        data: [],\n      },\n      read: {\n        name: \"read\",\n        uiName: \"Read\",\n        data: [],\n      },\n    },\n  };\n\n  selectingOption = () => {\n    this.setState({\n      selectMenuDisabled: true,\n    });\n  };\n\n  initializeHomeLoader = () => {\n    this.setState({ homeLoader: true });\n  };\n\n  initializeSearchLoader = () => {\n    this.setState({ searchLoader: true });\n  };\n\n  setBooks = (books) => {\n    let currentlyReadingShelfBooks = this.state.shelfs.currentlyReading.data,\n      wantToReadShelfBooks = this.state.shelfs.wantToRead.data,\n      readShelfBooks = this.state.shelfs.read.data;\n    books.map((book) => {\n      if (\n        currentlyReadingShelfBooks.some((shelfBook) => shelfBook.id === book.id)\n      ) {\n        book[\"shelf\"] = \"currentlyReady\";\n      } else if (\n        wantToReadShelfBooks.some((shelfBook) => shelfBook.id === book.id)\n      ) {\n        book[\"shelf\"] = \"wantToRead\";\n      } else if (readShelfBooks.some((shelfBook) => shelfBook.id === book.id)) {\n        book[\"shelf\"] = \"read\";\n      } else {\n        book[\"shelf\"] = \"none\";\n      }\n    });\n\n    this.setState({\n      books,\n      searchLoader: false,\n    });\n  };\n\n  resetBooks = () => {\n    this.setState({\n      books: [],\n      searchLoader: false,\n    });\n  };\n\n  handleShelfs = (fetchedBooks, screenName) => {\n    let clonedShelfs = this.state.shelfs;\n    if (screenName === \"home\") {\n      this.setState({\n        books: fetchedBooks,\n      });\n    } else {\n      this.setState({\n        books: [],\n      });\n    }\n\n    fetchedBooks.map((book) => {\n      const bookShelf = book.shelf;\n      if (this.state.shelfs[bookShelf].name === bookShelf) {\n        let clonedShelf = clonedShelfs[bookShelf];\n        clonedShelf.data.push(book);\n        clonedShelfs = {\n          ...clonedShelfs,\n          [bookShelf]: clonedShelf,\n        };\n        this.setState({\n          ...this.state,\n          shelfs: clonedShelfs,\n        });\n      }\n    });\n\n    this.setState({\n      homeLoader: false,\n      searchLoader: false,\n    });\n  };\n\n  shelfOptionSelected = (book, shelf) => {\n    let clonedShelfs = this.state.shelfs;\n    if (book.shelf && book.shelf !== \"none\") {\n      let oldShelf = book.shelf,\n        clonedOldShelf = clonedShelfs[oldShelf],\n        filteredClonedOldShelfArray = clonedOldShelf.data.filter(\n          (shelfBook) => book.id !== shelfBook.id\n        );\n\n      clonedOldShelf = {\n        ...clonedOldShelf,\n        data: filteredClonedOldShelfArray,\n      };\n\n      book.shelf = shelf;\n\n      if (shelf !== \"none\") {\n        let clonedNewShelf = clonedShelfs[shelf];\n        clonedNewShelf.data.push(book);\n\n        clonedShelfs = {\n          ...clonedShelfs,\n          [oldShelf]: clonedOldShelf,\n          [shelf]: clonedNewShelf,\n        };\n      } else {\n        clonedShelfs = {\n          ...clonedShelfs,\n          [oldShelf]: clonedOldShelf,\n        };\n      }\n    }\n\n    let clonedBooks = this.state.books;\n    let requiredBook = clonedBooks.find(\n      (clonedBook) => book.id === clonedBook.id\n    );\n    if (requiredBook) {\n      requiredBook.shelf = shelf;\n    }\n\n    this.setState({\n      ...this.state,\n      shelfs: clonedShelfs,\n      selectMenuDisabled: false,\n      books: clonedBooks,\n    });\n  };\n\n  render() {\n    // Function to reload the current web page\n    // function refreshPage() {\n    //   window.location.reload(false);\n    // }\n\n    return (\n      <Switch>\n        <div className=\"app\">\n          {/* <button onClick={refreshPage}>Refresh Page</button>  */}\n          <Header />\n          <Routes\n            shelfs={this.state.shelfs}\n            handleShelfs={this.handleShelfs}\n            initializeHomeLoader={this.initializeHomeLoader}\n            homeLoader={this.state.homeLoader}\n            shelfOptionSelected={this.shelfOptionSelected}\n            selectingOption={this.selectingOption}\n            selectMenuDisabled={this.state.selectMenuDisabled}\n            books={this.state.books}\n            resetBooks={this.resetBooks}\n            setBooks={this.setBooks}\n            initializeSearchLoader={this.initializeSearchLoader}\n            searchLoader={this.state.searchLoader}\n          />\n          <Footer />\n        </div>\n      </Switch>\n    );\n  }\n}\n\nexport default BooksApp;\n\n// import React from \"react\";\n// import { BrowserRouter, Route, Switch } from \"react-router-dom\";\n// import Search from \"./Search\";\n// import Home from \"./Home\";\n// import About from \"./About\";\n// import Header from \"./Header\";\n// import Footer from \"./Footer\";\n// import Login from \"./Login\";\n// import Signup from \"./Signup\";\n// import \"bootstrap/dist/css/bootstrap.css\";\n// import \"./App.css\";\n// import \"@fortawesome/fontawesome-svg-core/styles.css\";\n\n// class BooksApp extends React.Component {\n//   state = {\n//     homeLoader: false,\n//     searchLoader: false,\n//     selectMenuDisabled: false,\n//     books: [],\n//     shelfs: {\n//       currentlyReading: {\n//         name: \"currentlyReading\",\n//         uiName: \"Currently Reading\",\n//         data: [],\n//       },\n//       wantToRead: {\n//         name: \"wantToRead\",\n//         uiName: \"Want to Read\",\n//         data: [],\n//       },\n//       read: {\n//         name: \"read\",\n//         uiName: \"Read\",\n//         data: [],\n//       },\n//     },\n//   };\n\n//   selectingOption = () => {\n//     this.setState({\n//       selectMenuDisabled: true,\n//     });\n//   };\n\n//   initializeHomeLoader = () => {\n//     this.setState({ homeLoader: true });\n//   };\n\n//   initializeSearchLoader = () => {\n//     this.setState({ searchLoader: true });\n//   };\n\n//   setBooks = (books) => {\n//     let currentlyReadingShelfBooks = this.state.shelfs.currentlyReading.data,\n//       wantToReadShelfBooks = this.state.shelfs.wantToRead.data,\n//       readShelfBooks = this.state.shelfs.read.data;\n//     books.map((book) => {\n//       if (\n//         currentlyReadingShelfBooks.some((shelfBook) => shelfBook.id === book.id)\n//       ) {\n//         book[\"shelf\"] = \"currentlyReady\";\n//       } else if (\n//         wantToReadShelfBooks.some((shelfBook) => shelfBook.id === book.id)\n//       ) {\n//         book[\"shelf\"] = \"wantToRead\";\n//       } else if (readShelfBooks.some((shelfBook) => shelfBook.id === book.id)) {\n//         book[\"shelf\"] = \"read\";\n//       } else {\n//         book[\"shelf\"] = \"none\";\n//       }\n//     });\n\n//     this.setState({\n//       books,\n//       searchLoader: false,\n//     });\n//   };\n\n//   resetBooks = () => {\n//     this.setState({\n//       books: [],\n//       searchLoader: false,\n//     });\n//   };\n\n//   handleShelfs = (fetchedBooks, screenName) => {\n//     let clonedShelfs = this.state.shelfs;\n//     if (screenName === \"home\") {\n//       this.setState({\n//         books: fetchedBooks,\n//       });\n//     } else {\n//       this.setState({\n//         books: [],\n//       });\n//     }\n\n//     fetchedBooks.map((book) => {\n//       const bookShelf = book.shelf;\n//       if (this.state.shelfs[bookShelf].name === bookShelf) {\n//         let clonedShelf = clonedShelfs[bookShelf];\n//         clonedShelf.data.push(book);\n//         clonedShelfs = {\n//           ...clonedShelfs,\n//           [bookShelf]: clonedShelf,\n//         };\n//         this.setState({\n//           ...this.state,\n//           shelfs: clonedShelfs,\n//         });\n//       }\n//     });\n\n//     this.setState({\n//       homeLoader: false,\n//       searchLoader: false,\n//     });\n//   };\n\n//   shelfOptionSelected = (book, shelf) => {\n//     let clonedShelfs = this.state.shelfs;\n//     if (book.shelf && book.shelf !== \"none\") {\n//       let oldShelf = book.shelf,\n//         clonedOldShelf = clonedShelfs[oldShelf],\n//         filteredClonedOldShelfArray = clonedOldShelf.data.filter(\n//           (shelfBook) => book.id !== shelfBook.id\n//         );\n\n//       clonedOldShelf = {\n//         ...clonedOldShelf,\n//         data: filteredClonedOldShelfArray,\n//       };\n\n//       book.shelf = shelf;\n\n//       if (shelf !== \"none\") {\n//         let clonedNewShelf = clonedShelfs[shelf];\n//         clonedNewShelf.data.push(book);\n\n//         clonedShelfs = {\n//           ...clonedShelfs,\n//           [oldShelf]: clonedOldShelf,\n//           [shelf]: clonedNewShelf,\n//         };\n//       } else {\n//         clonedShelfs = {\n//           ...clonedShelfs,\n//           [oldShelf]: clonedOldShelf,\n//         };\n//       }\n//     }\n\n//     let clonedBooks = this.state.books;\n//     let requiredBook = clonedBooks.find(\n//       (clonedBook) => book.id === clonedBook.id\n//     );\n//     if (requiredBook) {\n//       requiredBook.shelf = shelf;\n//     }\n\n//     this.setState({\n//       ...this.state,\n//       shelfs: clonedShelfs,\n//       selectMenuDisabled: false,\n//       books: clonedBooks,\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <BrowserRouter>\n//         <div className=\"app\">\n//           <Header />\n//           <Footer />\n//           <Switch>\n//             <Route exact path=\"/about\">\n//               <About />\n//             </Route>\n//             <Route exact path=\"/Login\">\n//               <Login />\n//             </Route>\n//             <Route exact path=\"/signup\">\n//               <Signup />\n//             </Route>\n//             <Route exact path=\"/\">\n//               <Home\n//                 shelfs={this.state.shelfs}\n//                 handleShelfs={this.handleShelfs}\n//                 initializeHomeLoader={this.initializeHomeLoader}\n//                 homeLoader={this.state.homeLoader}\n//                 shelfOptionSelected={this.shelfOptionSelected}\n//                 selectingOption={this.selectingOption}\n//                 selectMenuDisabled={this.state.selectMenuDisabled}\n//               />\n//             </Route>\n\n//             <Route exact path=\"/search\">\n//               <Search\n//                 books={this.state.books}\n//                 shelfOptionSelected={this.shelfOptionSelected}\n//                 selectingOption={this.selectingOption}\n//                 handleShelfs={this.handleShelfs}\n//                 selectMenuDisabled={this.state.selectMenuDisabled}\n//                 resetBooks={this.resetBooks}\n//                 setBooks={this.setBooks}\n//                 initializeSearchLoader={this.initializeSearchLoader}\n//                 searchLoader={this.state.searchLoader}\n//               />\n//             </Route>\n//           </Switch>\n//         </div>\n//       </BrowserRouter>\n//     );\n//   }\n// }\n\n// export default BooksApp;\n"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}