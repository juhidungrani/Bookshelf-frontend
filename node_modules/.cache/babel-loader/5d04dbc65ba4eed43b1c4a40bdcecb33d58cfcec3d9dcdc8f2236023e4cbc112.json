{"ast":null,"code":"// AIzaSyA33VDxvw_ttY9BCFQ6hPmGvSX46WQT-dE\n\n// const API_KEY = 'AIzaSyA33VDxvw_ttY9BCFQ6hPmGvSX46WQT-dE';\n\n// // Generate a unique token for storing your bookshelf data on the backend server.\n// let token = localStorage.token\n// if (!token)\n//   token = localStorage.token = Math.random().toString(36).substr(-8)\n\n// const headers = {\n//   'Accept': 'application/json',\n//   'Authorization': token\n// }\n\n// export const get = (bookId) =>\n//   fetch(`${API_KEY}/books/${bookId}`, { headers })\n//     .then(res => res.json())\n//     .then(data => data.book)\n\n// export const getAll = () =>\n//   fetch(`${API_KEY}/books`, { headers })\n//     .then(res => res.json())\n//     .then(data => data.books)\n\n// export const update = (book, shelf) =>\n//   fetch(`${API_KEY}/books/${book.id}`, {\n//     method: 'PUT',\n//     headers: {\n//       ...headers,\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify({ shelf })\n//   }).then(res => res.json())\n\n// export const search = (query) =>\n//   fetch(`${API_KEY}/search`, {\n//     method: 'POST',\n//     headers: {\n//       ...headers,\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify({ query })\n//   }).then(res => res.json())\n//     .then(data => data.books)\nconst searchBooks = query => {\n  const url = `https://www.googleapis.com/books/v1/volumes?q=harrypotter&key=AIzaSyCpWq4ZapraIyAC8ZGp08aiJ-4m_zofCBw`;\n  return fetch(url).then(response => response.json()).then(data => data.items).catch(error => {\n    console.error('Error fetching book data from Google Books API:', error);\n    return [];\n  });\n};","map":{"version":3,"names":["searchBooks","query","url","fetch","then","response","json","data","items","catch","error","console"],"sources":["C:/Users/91900/OneDrive/Desktop/CAPSTONE PROJECT UPGRAD/frontend/src/BooksAPI.js"],"sourcesContent":["// AIzaSyA33VDxvw_ttY9BCFQ6hPmGvSX46WQT-dE\r\n\r\n// const API_KEY = 'AIzaSyA33VDxvw_ttY9BCFQ6hPmGvSX46WQT-dE';\r\n\r\n// // Generate a unique token for storing your bookshelf data on the backend server.\r\n// let token = localStorage.token\r\n// if (!token)\r\n//   token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\n// const headers = {\r\n//   'Accept': 'application/json',\r\n//   'Authorization': token\r\n// }\r\n\r\n// export const get = (bookId) =>\r\n//   fetch(`${API_KEY}/books/${bookId}`, { headers })\r\n//     .then(res => res.json())\r\n//     .then(data => data.book)\r\n\r\n// export const getAll = () =>\r\n//   fetch(`${API_KEY}/books`, { headers })\r\n//     .then(res => res.json())\r\n//     .then(data => data.books)\r\n\r\n// export const update = (book, shelf) =>\r\n//   fetch(`${API_KEY}/books/${book.id}`, {\r\n//     method: 'PUT',\r\n//     headers: {\r\n//       ...headers,\r\n//       'Content-Type': 'application/json'\r\n//     },\r\n//     body: JSON.stringify({ shelf })\r\n//   }).then(res => res.json())\r\n\r\n// export const search = (query) =>\r\n//   fetch(`${API_KEY}/search`, {\r\n//     method: 'POST',\r\n//     headers: {\r\n//       ...headers,\r\n//       'Content-Type': 'application/json'\r\n//     },\r\n//     body: JSON.stringify({ query })\r\n//   }).then(res => res.json())\r\n//     .then(data => data.books)\r\nconst searchBooks = (query) => {\r\n  const url = `https://www.googleapis.com/books/v1/volumes?q=harrypotter&key=AIzaSyCpWq4ZapraIyAC8ZGp08aiJ-4m_zofCBw`;\r\n\r\n  return fetch(url)\r\n    .then((response) => response.json())\r\n    .then((data) => data.items)\r\n    .catch((error) => {\r\n      console.error('Error fetching book data from Google Books API:', error);\r\n      return [];\r\n    });\r\n};\r\n"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,WAAW,GAAIC,KAAK,IAAK;EAC7B,MAAMC,GAAG,GAAI,uGAAsG;EAEnH,OAAOC,KAAK,CAACD,GAAG,CAAC,CACdE,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKA,IAAI,CAACC,KAAK,CAAC,CAC1BC,KAAK,CAAEC,KAAK,IAAK;IAChBC,OAAO,CAACD,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;IACvE,OAAO,EAAE;EACX,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}