{"ast":null,"code":"// const api = \"https://reactnd-books-api.udacity.com\"\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token;\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n};\n\n// export const get = (bookId) =>\n//   fetch(`${api}/books/${bookId}`, { headers })\n//     .then(res => res.json())\n//     .then(data => data.book)\n\n// export const getAll = () =>\n//   fetch(`${api}/books`, { headers })\n//     .then(res => res.json())\n//     .then(data => data.books)\n\n// export const update = (book, shelf) =>\n//   fetch(`${api}/books/${book.id}`, {\n//     method: 'PUT',\n//     headers: {\n//       ...headers,\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify({ shelf })\n//   }).then(res => res.json())\n\n// export const search = (query) =>\n//   fetch(`${api}/search`, {\n//     method: 'POST',\n//     headers: {\n//       ...headers,\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify({ query })\n//   }).then(res => res.json())\n//     .then(data => data.books)\n\nconst API_BASE_URL = 'https://www.googleapis.com/books/v1';\nexport const get = bookId => fetch(`${API_BASE_URL}/volumes/${bookId}`).then(res => res.json()).then(data => data.volumeInfo);\nexport const getAll = query => fetch(`${API_BASE_URL}/volumes?q=${encodeURIComponent(query)}`).then(res => res.json()).then(data => data.items.map(item => item.volumeInfo));\nexport const update = (book, shelf) => {\n  // Perform any necessary logic or validations for updating books in your own backend\n\n  // Return a Promise that resolves with the updated book object\n  return Promise.resolve(book);\n};\nexport const search = query => fetch(`${API_BASE_URL}/volumes?q=${encodeURIComponent(query)}`).then(res => res.json()).then(data => data.items.map(item => item.volumeInfo));","map":{"version":3,"names":["token","localStorage","Math","random","toString","substr","headers","API_BASE_URL","get","bookId","fetch","then","res","json","data","volumeInfo","getAll","query","encodeURIComponent","items","map","item","update","book","shelf","Promise","resolve","search"],"sources":["C:/Users/91900/OneDrive/Desktop/CAPSTONE PROJECT UPGRAD/frontend/src/BooksAPI.js"],"sourcesContent":["\r\n// const api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\n// export const get = (bookId) =>\r\n//   fetch(`${api}/books/${bookId}`, { headers })\r\n//     .then(res => res.json())\r\n//     .then(data => data.book)\r\n\r\n// export const getAll = () =>\r\n//   fetch(`${api}/books`, { headers })\r\n//     .then(res => res.json())\r\n//     .then(data => data.books)\r\n\r\n// export const update = (book, shelf) =>\r\n//   fetch(`${api}/books/${book.id}`, {\r\n//     method: 'PUT',\r\n//     headers: {\r\n//       ...headers,\r\n//       'Content-Type': 'application/json'\r\n//     },\r\n//     body: JSON.stringify({ shelf })\r\n//   }).then(res => res.json())\r\n\r\n// export const search = (query) =>\r\n//   fetch(`${api}/search`, {\r\n//     method: 'POST',\r\n//     headers: {\r\n//       ...headers,\r\n//       'Content-Type': 'application/json'\r\n//     },\r\n//     body: JSON.stringify({ query })\r\n//   }).then(res => res.json())\r\n//     .then(data => data.books)\r\n\r\nconst API_BASE_URL = 'https://www.googleapis.com/books/v1';\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${API_BASE_URL}/volumes/${bookId}`)\r\n    .then((res) => res.json())\r\n    .then((data) => data.volumeInfo);\r\n\r\nexport const getAll = (query) =>\r\n  fetch(`${API_BASE_URL}/volumes?q=${encodeURIComponent(query)}`)\r\n    .then((res) => res.json())\r\n    .then((data) => data.items.map((item) => item.volumeInfo));\r\n\r\nexport const update = (book, shelf) => {\r\n  // Perform any necessary logic or validations for updating books in your own backend\r\n\r\n  // Return a Promise that resolves with the updated book object\r\n  return Promise.resolve(book);\r\n};\r\n\r\nexport const search = (query) =>\r\n  fetch(`${API_BASE_URL}/volumes?q=${encodeURIComponent(query)}`)\r\n    .then((res) => res.json())\r\n    .then((data) => data.items.map((item) => item.volumeInfo));\r\n"],"mappings":"AACA;;AAGA;AACA,IAAIA,KAAK,GAAGC,YAAY,CAACD,KAAK;AAC9B,IAAI,CAACA,KAAK,EACRA,KAAK,GAAGC,YAAY,CAACD,KAAK,GAAGE,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;AAEpE,MAAMC,OAAO,GAAG;EACd,QAAQ,EAAE,kBAAkB;EAC5B,eAAe,EAAEN;AACnB,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMO,YAAY,GAAG,qCAAqC;AAE1D,OAAO,MAAMC,GAAG,GAAIC,MAAM,IACxBC,KAAK,CAAE,GAAEH,YAAa,YAAWE,MAAO,EAAC,CAAC,CACvCE,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAKA,IAAI,CAACC,UAAU,CAAC;AAEpC,OAAO,MAAMC,MAAM,GAAIC,KAAK,IAC1BP,KAAK,CAAE,GAAEH,YAAa,cAAaW,kBAAkB,CAACD,KAAK,CAAE,EAAC,CAAC,CAC5DN,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAKA,IAAI,CAACK,KAAK,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACN,UAAU,CAAC,CAAC;AAE9D,OAAO,MAAMO,MAAM,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAK;EACrC;;EAEA;EACA,OAAOC,OAAO,CAACC,OAAO,CAACH,IAAI,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMI,MAAM,GAAIV,KAAK,IAC1BP,KAAK,CAAE,GAAEH,YAAa,cAAaW,kBAAkB,CAACD,KAAK,CAAE,EAAC,CAAC,CAC5DN,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAKA,IAAI,CAACK,KAAK,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACN,UAAU,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}